}
no.param.par.var = do.call("rbind", listOfDataFrames)
names(no.param.par.var) = "no.param"
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result.cluster[[i]][[2]])
}
summary.param = do.call("rbind", listOfDataFrames)
# cbPalette = c("gray", "skyblue", "orange", "green3", "yellow3", "#0072B2", "#D55E00")
cbPalette = c("darkorange", "cyan", "firebrick", "deepskyblue3")
i = 0
font.size = 10
plot = list()
if (with.storage==T) {
var = as.factor(c("k","Y","af","as","ar","sf","sr"))
title = as.character(c("A","B","C","D","E","F","G"))
} else {
var = as.factor(c("Y","af","as","ar","sf","sr"))
title = as.character(c("A","B","C","D","E","F"))
}
pd <- position_dodge(0.5)
ggplot(data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment)))
ggplot(data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment))) +
geom_ribbon(data = summary.param.set, aes(ymin=Parameter-Parameter_SD, ymax=Parameter+Parameter_SD), linetype=2, alpha=0.1,size=0.1) +
geom_point(position=pd,size=0.01) +
geom_line(position=pd,data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment)),size=1) +
# ylab(paste(as.character(var[p]),"(fraction)")) +
ylab(paste(as.character(var[p]))) +
labs(colour="Treatment") +
scale_color_manual(values=cbPalette[1:4]) +
scale_y_continuous(limits = c(min(summary.param.set.limit$Parameter)-2*max(summary.param.set.limit$Parameter_SD),
max(summary.param.set.limit$Parameter)+2*max(summary.param.set.limit$Parameter_SD))) +
annotate("text", x = min(summary.param.set$Date), y = max(summary.param.set$Parameter) + 2*max(summary.param.set$Parameter_SD), size = font.size-7, label = paste(title[p])) +
theme_bw() +
theme(legend.title = element_text(colour="black", size=font.size-font.size)) +
theme(legend.text = element_text(colour="black", size=font.size-3)) +
theme(legend.position = c(0.45,0.82)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=font.size)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = font.size, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
plot.Modelled.parameters.wtc3(result,with.storage)
summary.param.set = subset(summary.param, variable %in% var[p] & no.param %in% no.param.par.var$no.param[z])
i = i + 1
plot[[i]] = ggplot(data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment))) +
geom_ribbon(data = summary.param.set, aes(ymin=Parameter-Parameter_SD, ymax=Parameter+Parameter_SD), linetype=2, alpha=0.1,size=0.1) +
geom_point(position=pd,size=0.01) +
geom_line(position=pd,data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment)),size=1) +
# ylab(paste(as.character(var[p]),"(fraction)")) +
ylab(paste(as.character(var[p]))) +
labs(colour="Treatment") +
scale_color_manual(values=cbPalette[1:4]) +
scale_y_continuous(limits = c(min(summary.param.set.limit$Parameter)-2*max(summary.param.set.limit$Parameter_SD),
max(summary.param.set.limit$Parameter)+2*max(summary.param.set.limit$Parameter_SD))) +
annotate("text", x = min(summary.param.set$Date), y = max(summary.param.set$Parameter) + 2*max(summary.param.set$Parameter_SD), size = font.size-7, label = paste(title[p])) +
theme_bw() +
theme(legend.title = element_text(colour="black", size=font.size-font.size)) +
theme(legend.text = element_text(colour="black", size=font.size-3)) +
theme(legend.position = c(0.45,0.82)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=font.size)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = font.size, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
if (with.storage==T) {
if (p==1) {
# plot[[i]] = plot[[i]] + scale_colour_manual(name="", breaks=c("1", "2", "3"),
#                                             labels=c("Small", "Large", "Free"), values=cbPalette[2:4]) +
plot[[i]] = plot[[i]] + scale_colour_manual(name="", values=cbPalette[1:4]) +
ylab(expression(k~"(g C "*g^"-1"*" C "*d^"-1"*")"))
plot[[i]] = plot[[i]] + theme(legend.key.height=unit(0.7,"line"))
} else if (p>1) {
plot[[i]] = plot[[i]] + guides(colour=FALSE)
}
if (p==2) {
plot[[i]] = plot[[i]] + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 0.8), units="line"))
}
if (p==3) {
# plot[[i]] = plot[[i]] + ylab(expression(a[f]~"(fraction)")) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
plot[[i]] = plot[[i]] + ylab(expression(a[f])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==4) {
plot[[i]] = plot[[i]] + ylab(expression(a[w])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==5) {
plot[[i]] = plot[[i]] + ylab(expression(a[r])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==6) {
plot[[i]] = plot[[i]] + ylab(expression(s[f]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
if (p==7) {
plot[[i]] = plot[[i]] + ylab(expression(s[r]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
} else {
if (p==1) {
plot[[i]] = plot[[i]] + scale_colour_manual(name="", values=cbPalette[1:4])
plot[[i]] = plot[[i]] + theme(legend.key.height=unit(0.6,"line"))
} else if (p>1) {
plot[[i]] = plot[[i]] + guides(colour=FALSE)
}
if (p==2) {
plot[[i]] = plot[[i]] + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 0.8), units="line"))
plot[[i]] = plot[[i]] + ylab(expression(a[f])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==3) {
plot[[i]] = plot[[i]] + ylab(expression(a[w])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==4) {
plot[[i]] = plot[[i]] + ylab(expression(a[r])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==5) {
plot[[i]] = plot[[i]] + ylab(expression(s[f]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
if (p==6) {
plot[[i]] = plot[[i]] + ylab(expression(s[r]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
}
plot[[i]]
i
plot[[i]]
source('R/load_packages_wtc3.R')
# Load the custom analysis and plotting functions that do all of the actual work
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
#---------------------------------
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result.cluster[[i]][[1]])
}
no.param.par.var = do.call("rbind", listOfDataFrames)
names(no.param.par.var) = "no.param"
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result.cluster[[i]][[2]])
}
summary.param = do.call("rbind", listOfDataFrames)
cbPalette = c("darkorange", "cyan", "firebrick", "deepskyblue3")
i = 0
font.size = 10
plot = list()
if (with.storage==T) {
var = as.factor(c("k","Y","af","as","ar","sf","sr"))
title = as.character(c("A","B","C","D","E","F","G"))
} else {
var = as.factor(c("Y","af","as","ar","sf","sr"))
title = as.character(c("A","B","C","D","E","F"))
}
pd <- position_dodge(0.5)
# no.param.par.var = result[[1]]
# summary.param = result[[2]]
# summary.data = result[[3]]
# summary.output = result[[4]]
# summary.error = result[[5]]
p=1
z=1
summary.param.set.limit = subset(summary.param, variable %in% var[p])
summary.param.set = subset(summary.param, variable %in% var[p] & no.param %in% no.param.par.var$no.param[z])
i = i + 1
plot[[i]] = ggplot(data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment))) +
geom_ribbon(data = summary.param.set, aes(ymin=Parameter-Parameter_SD, ymax=Parameter+Parameter_SD), linetype=2, alpha=0.1,size=0.1) +
geom_point(position=pd,size=0.01) +
geom_line(position=pd,data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment)),size=1) +
# ylab(paste(as.character(var[p]),"(fraction)")) +
ylab(paste(as.character(var[p]))) +
labs(colour="Treatment") +
scale_color_manual(values=cbPalette[1:4]) +
scale_y_continuous(limits = c(min(summary.param.set.limit$Parameter)-2*max(summary.param.set.limit$Parameter_SD),
max(summary.param.set.limit$Parameter)+2*max(summary.param.set.limit$Parameter_SD))) +
annotate("text", x = min(summary.param.set$Date), y = max(summary.param.set$Parameter) + 2*max(summary.param.set$Parameter_SD), size = font.size-7, label = paste(title[p])) +
theme_bw() +
theme(legend.title = element_text(colour="black", size=font.size-font.size)) +
theme(legend.text = element_text(colour="black", size=font.size-3)) +
theme(legend.position = c(0.45,0.82)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=font.size)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = font.size, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
plot[[i]]
with.storage
if (p==1) {
# plot[[i]] = plot[[i]] + scale_colour_manual(name="", breaks=c("1", "2", "3"),
#                                             labels=c("Small", "Large", "Free"), values=cbPalette[2:4]) +
plot[[i]] = plot[[i]] + scale_colour_manual(name="", values=cbPalette[1:4]) +
ylab(expression(k~"(g C "*g^"-1"*" C "*d^"-1"*")"))
plot[[i]] = plot[[i]] + theme(legend.key.height=unit(0.7,"line"))
} else if (p>1) {
plot[[i]] = plot[[i]] + guides(colour=FALSE)
}
if (p==2) {
plot[[i]] = plot[[i]] + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 0.8), units="line"))
}
if (p==3) {
# plot[[i]] = plot[[i]] + ylab(expression(a[f]~"(fraction)")) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
plot[[i]] = plot[[i]] + ylab(expression(a[f])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==4) {
plot[[i]] = plot[[i]] + ylab(expression(a[w])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==5) {
plot[[i]] = plot[[i]] + ylab(expression(a[r])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==6) {
plot[[i]] = plot[[i]] + ylab(expression(s[f]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
if (p==7) {
plot[[i]] = plot[[i]] + ylab(expression(s[r]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
plot[[i]]
length(var)
length(no.param.par.var)
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result.cluster[[i]][[1]])
}
no.param.par.var = do.call("rbind", listOfDataFrames)
names(no.param.par.var) = "no.param"
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result.cluster[[i]][[2]])
}
summary.param = do.call("rbind", listOfDataFrames)
# cbPalette = c("gray", "skyblue", "orange", "green3", "yellow3", "#0072B2", "#D55E00")
cbPalette = c("darkorange", "cyan", "firebrick", "deepskyblue3")
i = 0
font.size = 10
plot = list()
if (with.storage==T) {
var = as.factor(c("k","Y","af","as","ar","sf","sr"))
title = as.character(c("A","B","C","D","E","F","G"))
} else {
var = as.factor(c("Y","af","as","ar","sf","sr"))
title = as.character(c("A","B","C","D","E","F"))
}
pd <- position_dodge(0.5)
# no.param.par.var = result[[1]]
# summary.param = result[[2]]
# summary.data = result[[3]]
# summary.output = result[[4]]
# summary.error = result[[5]]
for (p in 1:length(var)) {
summary.param.set.limit = subset(summary.param, variable %in% var[p])
for (z in 1:length(no.param.par.var)) {
summary.param.set = subset(summary.param, variable %in% var[p] & no.param %in% no.param.par.var$no.param[z])
i = i + 1
plot[[i]] = ggplot(data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment))) +
geom_ribbon(data = summary.param.set, aes(ymin=Parameter-Parameter_SD, ymax=Parameter+Parameter_SD), linetype=2, alpha=0.1,size=0.1) +
geom_point(position=pd,size=0.01) +
geom_line(position=pd,data = summary.param.set, aes(x = Date, y = Parameter,  group = treatment, colour=factor(treatment)),size=1) +
# ylab(paste(as.character(var[p]),"(fraction)")) +
ylab(paste(as.character(var[p]))) +
labs(colour="Treatment") +
scale_color_manual(values=cbPalette[1:4]) +
scale_y_continuous(limits = c(min(summary.param.set.limit$Parameter)-2*max(summary.param.set.limit$Parameter_SD),
max(summary.param.set.limit$Parameter)+2*max(summary.param.set.limit$Parameter_SD))) +
annotate("text", x = min(summary.param.set$Date), y = max(summary.param.set$Parameter) + 2*max(summary.param.set$Parameter_SD), size = font.size-7, label = paste(title[p])) +
theme_bw() +
theme(legend.title = element_text(colour="black", size=font.size-font.size)) +
theme(legend.text = element_text(colour="black", size=font.size-3)) +
theme(legend.position = c(0.45,0.82)) +
theme(legend.key = element_blank()) +
theme(text = element_text(size=font.size)) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = font.size, vjust=0.3)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
if (with.storage==T) {
if (p==1) {
# plot[[i]] = plot[[i]] + scale_colour_manual(name="", breaks=c("1", "2", "3"),
#                                             labels=c("Small", "Large", "Free"), values=cbPalette[2:4]) +
plot[[i]] = plot[[i]] + scale_colour_manual(name="", values=cbPalette[1:4]) +
ylab(expression(k~"(g C "*g^"-1"*" C "*d^"-1"*")"))
plot[[i]] = plot[[i]] + theme(legend.key.height=unit(0.7,"line"))
} else if (p>1) {
plot[[i]] = plot[[i]] + guides(colour=FALSE)
}
if (p==2) {
plot[[i]] = plot[[i]] + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 0.8), units="line"))
}
if (p==3) {
# plot[[i]] = plot[[i]] + ylab(expression(a[f]~"(fraction)")) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
plot[[i]] = plot[[i]] + ylab(expression(a[f])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==4) {
plot[[i]] = plot[[i]] + ylab(expression(a[w])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==5) {
plot[[i]] = plot[[i]] + ylab(expression(a[r])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==6) {
plot[[i]] = plot[[i]] + ylab(expression(s[f]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
if (p==7) {
plot[[i]] = plot[[i]] + ylab(expression(s[r]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
} else {
if (p==1) {
plot[[i]] = plot[[i]] + scale_colour_manual(name="", values=cbPalette[1:4])
plot[[i]] = plot[[i]] + theme(legend.key.height=unit(0.6,"line"))
} else if (p>1) {
plot[[i]] = plot[[i]] + guides(colour=FALSE)
}
if (p==2) {
plot[[i]] = plot[[i]] + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 0.8), units="line"))
plot[[i]] = plot[[i]] + ylab(expression(a[f])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==3) {
plot[[i]] = plot[[i]] + ylab(expression(a[w])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==4) {
plot[[i]] = plot[[i]] + ylab(expression(a[r])) + theme(plot.margin=unit(c(0.4, 0.4, 0.4, 1), units="line"))
}
if (p==5) {
plot[[i]] = plot[[i]] + ylab(expression(s[f]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
if (p==6) {
plot[[i]] = plot[[i]] + ylab(expression(s[r]~"(g C "*g^"-1"*" C "*d^"-1"*")"))
}
}
}
}
png("output/Figure_4_modelled_parameters.png", units="px", width=2000, height=2000, res=250)
print (do.call(grid.arrange,  plot))
dev.off()
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.parameters.wtc3(result,with.storage)
plot.Modelled.biomass.wtc3(result,with.storage)
treat.group = as.factor(c("ambient drought","ambient watered","elevated drought","elevated watered")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
# #-------------------------------------------------------------------------------------
# #- Matching C balance of the entire experiment considering C inputs and outputs
# source("R/C_balance_wtc3.R")
#
# #-------------------------------------------------------------------------------------
# Load the custom analysis and plotting functions that do all of the actual work
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T,T,T), model.comparison=c(F,F,F,F), model.optimization=c(F,F,F,F),
no.param.par.var=c(4,4,4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage)
plot.Modelled.biomass.wtc3(result,with.storage)
result.cluster
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
plot.Modelled.parameters.wtc3(result,with.storage)
plot.Modelled.biomass.wtc3(result,with.storage)
treat.group = as.factor(c("ambient drought","ambient watered","elevated drought","elevated watered")) # Assign all treatments
data.all = read.csv("processed_data/data_all.csv")
tnc.partitioning = read.csv("processed_data/tnc_partitioning_data.csv")
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-1)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T,T,T), model.comparison=c(F,F,F,F), model.optimization=c(F,F,F,F),
no.param.par.var=c(4,4,4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=3000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
makeCluster(detectCores()-1)
detectCores(logical = FALSE)
parallel:::detectCores()
makeCluster(detectCores()-4)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-4)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T,T,T), model.comparison=c(F,F,F,F), model.optimization=c(F,F,F,F),
no.param.par.var=c(4,4,4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1500))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-4)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T,T,T), model.comparison=c(F,F,F,F), model.optimization=c(F,F,F,F),
no.param.par.var=c(4,4,4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1500))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-4)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T,T,T), model.comparison=c(F,F,F,F), model.optimization=c(F,F,F,F),
no.param.par.var=c(4,4,4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-4)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T,T,T), model.comparison=c(F,F,F,F), model.optimization=c(F,F,F,F),
no.param.par.var=c(4,4,4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
source("R/functions_wtc3.R")
source("R/functions_wtc3_CBM.R")
# Model run for WTC3 dataset with clustering
cluster <- makeCluster(detectCores()-4)
# clusterEvalQ(cluster, library(xts))
clusterExport(cl=cluster, list("data.all","tnc.partitioning","treat.group"))
ex <- Filter(function(x) is.function(get(x, .GlobalEnv)), ls(.GlobalEnv))
clusterExport(cluster, ex)
result.cluster = list()
bic.cluster = list()
start <- proc.time() # Start clock
result <- clusterMap(cluster, CBM.wtc3, with.storage=c(T,T,T,T), model.comparison=c(F,F,F,F), model.optimization=c(F,F,F,F),
no.param.par.var=c(4,4,4,4),
treat.group=treat.group,
MoreArgs=list(chainLength=1000))
time_elapsed_series <- proc.time() - start # End clock
stopCluster(cluster)
listOfDataFrames <- vector(mode = "list", length = 4)
for (i in 1:4) {
listOfDataFrames[[i]] <- data.frame(result[[i]][[6]])
}
bic = do.call("rbind", listOfDataFrames)
write.csv(bic, "output/bic.csv", row.names=FALSE)
# Plot parameters and biomass data fit
plot.Modelled.parameters.wtc3(result,with.storage=T)
plot.Modelled.biomass.wtc3(result,with.storage=T)
